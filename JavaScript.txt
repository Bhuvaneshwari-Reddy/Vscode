JavaScript

Variables
=========
Anything that can be declared and  stored 
let--->available inside the block scope only(can be reassigned)

var--->global and local scope(can be reassigned)
Variables declared with var are hoisted to the top of their global or local scope, which makes them accessible before the line they are declared. 
Here's an example:
console.log(number) // undefined
var number = 50
console.log(number) // 50

const----->value cannot be changed and its in  block scope

Local and Global variables
-------------------------
Local-which are defined inside the block or function and accessable within the block or function
Example:
function locafun()
{
let x=5;============>local variable
console.log(x);
}
localfun();

Global -which are accessible from any function: they can be declared outside the function or with window objects.
Example:

letx=10;============>global variable
function locafun()
{
console.log(x);
}
localfun();


Data Types
==========
primitive and non primitive data types

There are 7 primitive data types 
Number----->integer and floating numbers
Bigint----->store and operate on large integers even beyond the safe integer limit for Numbers.Added n to the end of the integer.
String----->stored within double or single quotes
Boolean---->true or false
Null------->empty
Undefined-->variable without value
Symbol----->A Symbol value represents a unique identifier
and Object is a non-primitive data type-->to store keyed collections of various data 


Operators
=========
Addition+
subration-
multiplication*
division/
remainder(modulus)%
increment++
decrement--
concatination+
exponentiol**
assignment=



Comparision Operators
=====================
equalto==
greaterthan>
lesserthan<
greaterthanequalto>=
lesserthanequal<=
inequality!=
the identity or strict comparison operator===  


logical Operators
=====================
|| or(add)
&& and(multi)
!not	


Conditional Statement
=====================

if statement
------------
syntax-->
if (condition) {
  //if the condition is true block of code  executed 
}

if else statement
-----------------
syntax-->
if (condition) {
  //this code  will execute if the condition is true
} else {
  // this code  will execute if the condition is false
}

else if else statement
----------------------
syntax-->
if (condition) {
  statement;
} else if (condition) {
  statement;
  .
  .
} else {
  statement;
}



Switch
======
Replaces many  if and else if statements
syntax--->
switch (x) {
  case 'value1': // if (x === 'value1')
    ...[
      break
    ]
  case 'value2': // if (x === 'value2')
    ...[
      break
    ]
  default:
    ...[
      break
    ]
}

break and continue--->break statement stops the entire loop and continue statement skips particular iteration  
example:
let a = 2 * 3;
switch (a) {
  case 3:
    console.log('Too small');
  case 6:
    console.log('Exactly!');
  case 8:
    console.log('Too big');
  default:
    console.log("I don't know such values");
}



Loops
=====
There are five kinds of loops

while
do…while
for
for…in
for…of

While loop
---------
The while loop executes its statement or code block repeatedly as long as a specified condition is true. Once the expression becomes false, the loop ends.
Syntax--->
initialization
while(condition)
{
//statements of code
increment/decrement
}
example:
let x=0;
while(x<5)
{
console.log(x);
x++;
}


Do while loop
--------------
Irrespective of the condition it executes body of the loop at least one time. It means that the do...while statement repeats until a specified condition evaluates to false.
Syntax--->
initialization
do{
//statements of code
increment/decrement
}while(condition)
example:
let i = 0;
do {
  console.log(i);
  i++;
} while (i < 10);


For Loop
--------
The for loop repeats a block of code since a specified condition evaluates to false.
Syntax--->
for(initialization;condition;increment/decrement)
{
//statements of code
}
example:
let sum = 0;
for (let i = 1; i <= 10; i++) {
  sum = sum + i;
}
console.log("Sum = " + sum); // => Sum = 55

for in loop
-----------
iterates a specified variable over the properties of an object.
syntax--->
for(variablename in object)
{
  // Code to be executed
}
example:
const person = {fname:"John", lname:"Doe", age:25};
let text = "";
for (let x in person) {
  text += person[x] + " ";
  console.log(person[x])
}
for of loop
-----------
Iterate (loop) over the values of an array:
syntax--->
for (variable of iterable) {
  // code block to be executed
}
example:
let arr = ['a', 'b', 'c', 'd'];
for (let item of arr) {
  console.log(item)
}
// Result: a, b, c, d




Functions
=========
create functions in JavaScript using a function declaration
function show() {
  console.log('Welcome to W3Docs!');
}
show();


Anonymous function
-----------------
A function without name is called anonymous function ,
that function can be assigned to a variable and that variable can be called as function.
example:
let add=function(num1,num2)
{
return num1+num2;
}
let sum=add(5,2);
console.log(sum)


Callback functions
==================
a function that is passed as an argument or parameter to another function

used to handle asynchronous operations:
*Reading a file
*network request
*interacting with database

"Hey,when its done call this next"

The function which is passed as an argument will execute after the main function has executed
example :Hello(Hiii);
here Hello executes first followed by Hii



Promise-->request to be fullfilled in future
=======
An object that manages asynchronous operations 
wrap a promise object around asynchronous code ,promises to  return a value
 or reject

let promise=new promise((resolve,reject)=>
{

//statements of codes
})



Asyn/await--->works together both,await is valid only with async functions
=========
asyn-->makes a function to return a promise
await-->makes a async function wait for a promise
==================


stingify()---converts javascript object to JSON string
parse()------converts JSON string to javascript object
JSON. stringify() converts JavaScript objects or values into JSON strings
JSON. parse() transforms JSON strings back into JavaScript objects



=========================================
import and export in node js
const{baseurl,auth,randomName,randomMail,RequestBody}=require("./helpers.js")
module.exports={baseurl,auth,randomName,randomMail,RequestBody}




Git commands
============
git commit -m-->any changes to be added and committed
git add-->add the changes
git --version-->to check the version of git
ls-->lists the current directory contents
pwd-->working directory
git clone-->copy the path  of any other repository and clone whereever required(vs code,command promt)
git status-->gives the status of the added files
git push origin main-->upload local repo content to remote app
local repo-->laptop/desktop
remote app-->git hub

